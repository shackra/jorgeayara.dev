# This flake was initially generated by fh, the CLI for FlakeHub (version 0.1.22)
{
  # A helpful description of your flake
  description = "flake for my professional blog";

  # Flake inputs
  inputs = {
    pre-commit-hooks.url = "github:cachix/git-hooks.nix";
    sops-nix = {
      url = "github:Mic92/sops-nix";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    deploy-rs.url = "github:serokell/deploy-rs";
    flake-schemas.url = "https://flakehub.com/f/DeterminateSystems/flake-schemas/*";

    nixpkgs.url = "https://flakehub.com/f/NixOS/nixpkgs/*";
  };

  # Flake outputs that other flakes can use
  outputs =
    {
      self,
      flake-schemas,
      nixpkgs,
      pre-commit-hooks,
      deploy-rs,
      sops-nix,
    }:
    let
      # Helpers for producing system-specific outputs
      supportedSystems = [ "x86_64-linux" ];
      forEachSupportedSystem =
        f:
        nixpkgs.lib.genAttrs supportedSystems (
          system:
          f {
            pkgs = import nixpkgs { inherit system; };
          }
        );

      host = "jorgearaya.dev";
    in
    {
      # Schemas tell Nix about the structure of your flake's outputs
      schemas = flake-schemas.schemas;

      # Development environments
      devShells = forEachSupportedSystem (
        { pkgs }:
        {
          default = pkgs.mkShell {
            # Pinned packages available in the environment
            packages = with pkgs; [
              nil

              hugo
              djlint

              git
              git-lfs

              (pkgs.writeScriptBin "project-git-lfs-hook-installer" (builtins.readFile ./etc/scripts/lfs-hook.py))

              (pkgs.python312.withPackages (
                ps: with ps; [
                  black
                  isort
                  ruff
                  python-lsp-server
                  python-lsp-black
                  python-lsp-ruff
                  pylsp-rope
                ]
              ))
            ];

            shellHook =
              self.checks.${pkgs.system}.pre-commit-check.shellHook
              + ''
                echo "Injecting Git LFS hooks..."
                for hook in pre-push post-checkout post-commit post-merge; do
                  project-git-lfs-hook-installer --stage $hook
                done'';
            buildInputs = self.checks.${pkgs.system}.pre-commit-check.enabledPackages;
          };
        }
      );

      checks = forEachSupportedSystem (
        { pkgs }:
        {
          pre-commit-check = pre-commit-hooks.lib.${pkgs.system}.run {
            src = ./.;
            hooks = {
              # check nix code
              nil.enable = true;
              # check that secrets aren't committed to the repository
              pre-commit-hook-ensure-sops.enable = true;
              ripsecrets.enable = true;
              # self-explanatory
              check-toml.enable = true;
              # lint template files, go templates for my use-case
              djlint = {
                enable = true;
                name = "djlint - template linter";
                entry = "${pkgs.djlint}/bin/djlint --profile=golang";
                files = "\\.html$";
              };
              # check markdown format is correct
              markdownlint.enable = false;
              # other checkers
              check-case-conflicts.enable = true;
              end-of-file-fixer.enable = true;
              trim-trailing-whitespace.enable = true;
            };
          };
        }
      );

      nixosConfigurations.site = nixpkgs.lib.nixosSystem {
        system = "x86_64-linux";
        modules = [
          sops-nix.nixosModules.sops
          ./vps.nix
        ];
      };

      deploy.nodes.site = {
        hostname = host;
        profiles.system = {
          sshUser = "root";
          user = "root";
          path = deploy-rs.lib.x86_64-linux.activate.nixos self.nixosConfigurations.site;
        };
      };
    };
}
